#!/usr/bin/env python3

import sys
from math import *
import numpy as np
import time

import rospy
import actionlib
import tf2_ros
from actionlib_msgs.msg import GoalStatus
from geometry_msgs.msg import Point, PoseStamped, TransformStamped
from nav_msgs.msg import Path
from spar_msgs.msg import FlightMotionAction, FlightMotionGoal, ArucoLocalisation, TargetLocalisation
from breadcrumb.srv import RequestPath, RequestPathRequest
from sensor_msgs.msg import BatteryState
from std_msgs.msg import Bool, Time, String
from std_msgs.msg import Int32, UInt32MultiArray
from visualization_msgs.msg import Marker

# This is getting a bit more complicated now, so we'll put our information in
# a class to keep track of all of our variables. This is not so much different
# to the previous methods, other than the fact that the class will operate
# within itself.
# i.e. it will have it's own publishers, subscribers, etc., that
# will call it's own functions as callbacks, etc.
# global flight_halt_flag

global flight_height
flight_height = 2.25

class Guidance():
	def __init__(self, waypoints):
		# Make sure we have a valid waypoint list
		if not self.check_waypoints(waypoints):
			print("Invalid waypoint list input!, recommend abort")

		# Aruco Variables
		self.FoundAruco = False # If aruco is not found, land at origin (aruco landing contigency)
		self.TargetLabel = TargetLocalisation()

		#
		self.flight_halt_flag = False

		# initialise battery percentage
		self.battery_vol = 15

		# Internal counter to see what waypoint were are up to
		self.waypoint_counter = 0
		#self.reached_wp_1 = False

		# performing ROI flag
		self.performing_roi = False
		self.roi_waypoint = 0

		# Landing initialisation flag (to only run aruco_land once)
		self.aruco_land_initialised = False

		# Landing initialisation flag (critical battery)
		self.crit_bat_land_init = False

		# finished mission flag (to stop check_waypoint() running after aruco_land())
		self.mission_completed = False

		# roi counter (to index early landing functionality)
		self.roi_counter = 0

		# initialise bread crumb (wait for service to be published)
		# srvc_bc is the service proxy object, once initialised can use to call a service like a function
		rospy.wait_for_service('/breadcrumb/request_path')
		self.srvc_bc = rospy.ServiceProxy('/breadcrumb/request_path',RequestPath)

		# Save the input waypoints within guidance()
		self.waypoints = waypoints

		# Make some space to record down our current location
		self.current_location = Point()

		# Set our linear and rotational velocities for the flight (from launch file)
		self.vel_linear = rospy.get_param("~vel_linear",0.6)
		self.vel_yaw = rospy.get_param("~vel_yaw", 0.2)
		self.vel_vert = rospy.get_param("~vel_vert",0.3)
		self.acc_pos = rospy.get_param("~acc_pos",0.1)
		self.acc_yaw = rospy.get_param("acc_yaw",0.1)

		# Create our action client
		action_ns = rospy.get_param("~action_topic", 'spar/flight')
		self.spar_client = actionlib.SimpleActionClient(action_ns, FlightMotionAction)
		rospy.loginfo("Waiting for spar...")
		self.spar_client.wait_for_server()

		if not rospy.is_shutdown():
			# Good to go, start mission
			rospy.loginfo("Starting waypoint mission / Starting Callbacks")

			# create a controlled takeoff (0th wp needs to be above origin, for path planning purposes)
			#self.takeoff()
			self.send_wp(self.waypoints[0])
			self.waypoint_counter += 1

			#### subscribers ####
			# Setup a timer to check if our waypoint has completed at 20Hz
			self.timer = rospy.Timer(rospy.Duration(1/15), self.check_waypoint_status)
			# Callback to save "current location" such that we can perform and return from a diversion to the correct location
			self.sub_pose = rospy.Subscriber("~pose", PoseStamped, self.callback_pose)
			# Subscriber to catch "ROI" diversion commands
			self.sub_roi = rospy.Subscriber("~roi", PoseStamped, self.callback_inspect_roi)
			# Safe landing subscriber (for low battery status)
			self.sub_battery = rospy.Subscriber('/mavros/battery',BatteryState,self.callback_battery)
			# Subscriber for ArUco Marker Detection
			self.sub_aruco = rospy.Subscriber('/processed_aruco/localisation', ArucoLocalisation, self.callback_aruco_marker)
			# Target Detection Subscriber (recieve target location from ITA)
			self.sub_target = rospy.Subscriber('target_detection/localisation', TargetLocalisation, self.callback_target)
			# Target Detection Subscriber (to stop flight motion for detection purposes)
			# self.sub_detection_flag  = rospy.Subscriber('target_detection/stop', Bool, self.flight_halt)

			#### publishers ####
			# Publisher for GCS VOCAL
			self.pub_land_vocal = rospy.Publisher('vocal/land', Bool, queue_size = 10)
			# Target ID/Label Publisher (publish for payload) "This is published from depthai_publisher"
			#self.pub_target_label = rospy.Publisher('payload/target', TargetLocalisation, queue_size=10)
			# Inside your class or node initialization
			self.pub_roi_status = rospy.Publisher('/roi_status_flag', Bool, queue_size=10)
			# Target Detection publisher (to initiate ITA detection)
			# self.pub_detection_status = rospy.Publisher('/target_detection/stop', Bool, queue_size=10)
			# marker publisher
			pub_marker = rospy.Publisher('/visualization_marker', Marker, queue_size=10, latch=True)
			
			##### NEW #######
			# 
			self.pub_target_location = rospy.Publisher('target_detection/location', Bool, queue_size=10)
			self.pub_aruco_location = rospy.Publisher('/processed_aruco/location', Bool, queue_size=10)
			#####
			# If shutdown is issued (eg. CTRL+C), cancel current mission before rospy is shutdown.
			rospy.on_shutdown(lambda : self.shutdown())

	def callback_battery(self,msg_in): # callback for battery percentage tracking
		self.battery_vol = msg_in.voltage
		#Bat_vol = '/mavros/battery'
		#print(f"callback received topic value is:{Bat_vol}")

	def callback_aruco_marker(self, msg_in):
		self.FoundAruco = True
		self.landing_wp = [msg_in.frame_x, msg_in.frame_y, flight_height, 0] # Store the location
		rospy.loginfo(f'Received Aruco land location. ID: {msg_in.aruco_id} Detected at x: {msg_in.frame_x}, y: {msg_in.frame_y}')
		display_target([msg_in.frame_x, msg_in.frame_y, 0, 0],"guidance/aruco_position")

	def callback_target(self, msg_in):
		# if not self.performing_roi:
		rospy.loginfo(f'UAV Location at x: {self.current_location.x}, y: {self.current_location.y}, z: {self.current_location.z}')
		rospy.loginfo(f'Target [{msg_in.target_label}] Detected at x: {msg_in.frame_x}, y: {msg_in.frame_y}')
		self.TargetLabel = msg_in
		# rospy.sleep(rospy.Duration(2))
		if msg_in.target_label == 'person':
			display_target([msg_in.frame_x,msg_in.frame_y,0,0],"guidance/target_position_person")
		elif msg_in.target_label == 'backpack':
			display_target([msg_in.frame_x,msg_in.frame_y,0,0],"guidance/target_position_backpack")
		elif msg_in.target_label == 'drone':
			display_target([msg_in.frame_x,msg_in.frame_y,0,0],"guidance/target_position_drone")
		elif msg_in.target_label == 'phone':
			display_target([msg_in.frame_x,msg_in.frame_y,0,0],"guidance/target_position_phone")
		rospy.loginfo(f'Display [{msg_in.target_label}] in RVIZ')

	# This function will check receive the current pose of the UAV constantly
	def callback_pose(self, msg_in):
		#rospy.loginfo("Pose Callback recieved/Triggered")
		self.current_location = msg_in.pose.position

	def low_battery_landing(self,timer=None):
		if self.battery_vol <= 9.3 and not self.crit_bat_land_init:
			self.crit_bat_land_init = True
			print(f"Battery Voltage Critical!: {self.battery_vol}")
			self.spar_client.cancel_goal()
			goal = FlightMotionGoal()
			goal.motion = FlightMotionGoal.MOTION_LAND
			goal.velocity_vertical = self.vel_vert
			# Send the land signal/goals
			rospy.loginfo("Sending landing signal...")
			self.spar_client.send_goal(goal)
			self.spar_client.wait_for_result()
			# Output feedback on the landing result
			result = self.spar_client.get_state()
			if result == GoalStatus.SUCCEEDED:
				rospy.loginfo("Landing complete!")
				self.mission_completed = True

			else:
				rospy.logerr("Landing failed!")

	#####
	def flight_halt(self):
		self.performing_roi = True # tell check_waypoint_status to stop checking goal status during flight halt & during roi inspection
		self.spar_client.cancel_goal()
		goal = FlightMotionGoal()
		goal.motion = FlightMotionGoal.MOTION_STOP
		goal.velocity_vertical = 0.01
		goal.wait_for_convergence = True
		goal.position_radius = rospy.get_param("~position_radius", 0.15)  # Not applicable since we're stopping
		goal.yaw_range = rospy.get_param("~yaw_range", 0.1)  # Not applicable either
		goal.position.x = self.current_location.x
		goal.position.y = self.current_location.y
		goal.position.z = self.current_location.z
		self.spar_client.send_goal(goal)
		self.spar_client.wait_for_result()
		result = self.spar_client.get_state()
		rospy.sleep(10)
		if result == GoalStatus.SUCCEEDED:
			rospy.loginfo("Flight motion stopped successfully.")
			self.pub_detection_status.publish(Bool(data=False)) # here false indicates a successful stop (to initialise ITA detection)
			self.performing_roi = False # start checking waypoint goal status again
		else:
			rospy.logerr("Failed to stop flight motion.")

	# This function will fire whenever we recieve a timer event (te) from rospy.Timer()
	# The main purpose is to check if a waypoint has been reached,
	# and if so, send out the next waypoint to continue the mission
	def check_waypoint_status(self, te):
		# Call the low battery landing check
		self.low_battery_landing()

		# If we're performing the ROI diversion or if the mission is completed or the critical battery landing was initiated
		if not (self.performing_roi or self.mission_completed or self.crit_bat_land_init):

			# Check if the goal (waypoint) was successfully reached
			if self.spar_client.get_state() == GoalStatus.SUCCEEDED:
				rospy.loginfo("Reached waypoint %i!" % (self.waypoint_counter))
				
				# Early landing condition: if ArUco marker is found and 2 ROI checks completed, initiate landing early
				if self.FoundAruco and self.roi_counter == 2:
					rospy.loginfo("Found ArUco marker and completed ROI checks. Initiating early landing.")
					self.aruco_land()  # Early landing procedure
					return  # Exit the function early to prevent further waypoint processing

				# Normal mission continuation
				elif self.waypoint_counter < len(self.waypoints):
					# Generate path plan for next waypoint and send it
					path_plan_wps = self.path_plan([self.waypoints[self.waypoint_counter - 1], self.waypoints[self.waypoint_counter]])
					# New stuff
					xd = 0
					while xd < len(path_plan_wps):
						if not self.performing_roi:
							self.send_wp(path_plan_wps[xd])
							xd += 1
					#

					# OLD
					# for planned_path in path_plan_wps:
					# 	self.send_wp(planned_path)					
					# for planned_path in path_plan_wps:
					# 	self.send_wp(planned_path)
					# If using OLD change uncomment line 324 also

					# Increment waypoint counter
					self.waypoint_counter += 1

				else:
					# If all waypoints are completed, initiate normal landing sequence
					rospy.loginfo("Completed Waypoint List! Initiate Landing Sequence")
					self.aruco_land()

			# Handle early landing condition separately if ArUco is found during ROI checks
			elif self.FoundAruco and self.roi_counter == 2:
				rospy.loginfo("Completed All Tasks! Initiate Early Landing Sequence")
				self.aruco_land()

			# Check for mission failures (aborted, preempted, or rejected states)
			elif (self.spar_client.get_state() in [GoalStatus.PREEMPTED, GoalStatus.ABORTED, GoalStatus.REJECTED]):
				rospy.loginfo(self.spar_client.get_state())
				rospy.loginfo("Mission cancelled!")
				rospy.signal_shutdown("cancelled")


	# This function will fire whenever a ROI pose message is sent
	# It is also responsible for handling the ROI "inspection task"
	def callback_inspect_roi(self, msg_in):
		rospy.loginfo("ROI Callback recieved/triggered")

		# Set our flag that we are performing the diversion
		self.performing_roi = True
		rospy.loginfo("Starting diversion to ROI...")

		# Cancel the current goal (if there is one)
		self.spar_client.cancel_goal()

		# Set the "diversion waypoint" (at yaw zero)
		# dwp = [msg_in.pose.position.x, msg_in.pose.position.y, msg_in.pose.position.z + 0.5, 0.0] # old
		dwp = [msg_in.pose.position.x, msg_in.pose.position.y, msg_in.pose.position.z, 0.0]
		#rospy.loginfo("Diversion WP")
		#rospy.loginfo(msg_in.pose.position.x,msg_in.pose.position.y,msg_in.pose.position.z)
		# Set the "return waypoint" (at yaw zero)
		rwp = [self.current_location.x, self.current_location.y, self.current_location.z, 0.0]
		#rospy.loginfo("Return WP")
		#rospy.loginfo(self.current_location.x,self.current_location.y,self.current_location.z)

		# Send Diversion Waypoint
		self.send_wp(dwp)
		rospy.loginfo("Reached diversion ROI!")
		rospy.sleep(5)

		####################### haulting functionality
		self.pub_target_location.publish(Bool(data=True)) # Tell the ITA to start detection
		rospy.sleep(2) # wait for the data to update
		target_location = [self.TargetLabel.frame_x, self.TargetLabel.frame_y, 0.5, 0.0] # Detect the new location then go down to 1.5
		self.send_wp(target_location)
		self.pub_target_location.publish(Bool(data=False)) # Reset so that when trigger it start detection for new location
		rospy.sleep(1) # Change to higher number like 5
		######################

		# To publish the flag as True (to initiate payload drop)
		rospy.loginfo("Payload roi_status_flag set to True!")
		rospy.sleep(2.5)
		self.pub_roi_status.publish(Bool(data=True))  # Publishing the Bool message with data=True

		# Pause system to drop payload
		rospy.sleep(2.5) 
		rospy.loginfo("Returning to flight plan...")

		# To reset the flag to False (to prepare for next payload)
		self.pub_roi_status.publish(Bool(data=False))  # Publishing the Bool message with data=False

		# Send Return Waypoint
		self.send_wp(rwp)

		# "waypoint_counter" represents the "next waypoint"; "waypoint_counter - 1" represents the "current waypoint"
		rospy.loginfo("Resuming flight plan from waypoint %i!" % (self.waypoint_counter - 1))
		# self.send_wp(self.waypoints[self.waypoint_counter - 1]) 

		self.roi_counter += 1 # incriment roi counter (after the return waypoint was sent)

		# Unset our flag that we are performing a diversion to allow the waypoint timer to take back over
		self.performing_roi = False

	def takeoff(self):
		# Create our goal for takeoff motion 
		goal = FlightMotionGoal()
		goal.motion = FlightMotionGoal.MOTION_TAKEOFF
		goal.position.z = flight_height
		goal.velocity_vertical = self.vel_vert
		goal.wait_for_convergence = True
		goal.position_radius = rospy.get_param("~position_radius", 0.15)
		goal.yaw_range = rospy.get_param("~yaw_range", 0.1)

		self.spar_client.send_goal(goal)	
		self.spar_client.wait_for_result()
		result = self.spar_client.get_state()
		if result == GoalStatus.SUCCEEDED:
			print(f"Takeoff Successful: Initialise Searching")
		else:
			print(f"takeoff goal failed, initialising landing sequence")
			self.low_battery_landing() # land at current location

		rospy.on_shutdown(lambda:self.spar_client.cancel_goal())
	
	def send_wp(self, wp):
		# Make sure the waypoint is valid before continuing
		if not self.check_waypoint(wp):
			print("Invalid waypoint list input!, reccommend abort")
		# cancel current goal if there is one
		self.spar_client.cancel_goal()

		# Build the flight goal
		goal = FlightMotionGoal()
		goal.motion = FlightMotionGoal.MOTION_GOTO
		goal.position.x = wp[0]
		goal.position.y = wp[1]
		goal.position.z = wp[2]
		goal.yaw = wp[3]
		goal.velocity_vertical = self.vel_vert
		goal.velocity_horizontal = self.vel_linear
		goal.yawrate = self.vel_yaw
		goal.wait_for_convergence = True
		goal.position_radius = self.acc_pos
		goal.yaw_range = self.acc_yaw

		# check goal status (need to do this whenever sending actions to UAV)
		self.spar_client.send_goal(goal)
		self.spar_client.wait_for_result() # wait for waypoint to be reached
		result = self.spar_client.get_state() # check waypoints are acutally reached
		if result == GoalStatus.SUCCEEDED:
			print(f"send_wp goal succeeded for waypoint: {wp}")
		else:
			print(f"send_wp goal failed for waypoint: {wp}")
			
		 # If shutdown is issued, cancel current mission before rospy is shutdown
		rospy.on_shutdown(lambda : self.spar_client.cancel_goal())
	
	def aruco_land(self):
		if not self.aruco_land_initialised:
			# cancel current goal if there is one
			self.spar_client.cancel_goal()
			# Set the current UAV location including flight height
			starting_location = [self.current_location.x, self.current_location.y, flight_height, 0]
			# Check if an ArUco marker is detected to determine landing location
			if self.FoundAruco:  # Land at ArUco marker's coordinates
				rospy.loginfo("ArUco marker found. Landing at marker location.")
				landing_location = self.landing_wp  # Coordinates of detected ArUco marker (@ current altitude)
			else:  # Land at the origin
				rospy.loginfo("No ArUco marker detected. Landing at origin.")
				landing_location = [-1, -1, flight_height, 0]  # Origin coordinates
			
			# Plan the path from current location to the landing location (@ current altitude)
			self.landing_path = self.path_plan([starting_location, landing_location])
			# Send the UAV to the landing waypoints (@ current altitude)
			for landing_path in self.landing_path:
				self.send_wp(landing_path)

			# cancel previous goal set by send_wp()
			self.spar_client.cancel_goal()
			

			#####
			if self.FoundAruco:
				rospy.sleep(1) # wait for it to completely stop
				# Allows it to follow the location while going down by 0.5
				self.pub_aruco_location.publish(Bool(data=True)) # Tell the ITA to start detection
				self.send_wp([self.landing_wp[0], self.landing_wp[1], 1.6, self.landing_wp[3]]) # Go down to 1.6 along the right location
				self.pub_aruco_location.publish(Bool(data=False)) # Necessary to reset for the next step
				rospy.sleep(1.5) # Wait for it update location # Change to higher number like 5

				self.pub_aruco_location.publish(Bool(data=True)) # Tell the ITA to start detection
				self.send_wp([self.landing_wp[0], self.landing_wp[1], 0.8, self.landing_wp[3]]) # Go down to 0.8 along the right location
				self.pub_aruco_location.publish(Bool(data=False)) # Necessary to reset for the next step
				rospy.sleep(1.5) # Wait for it update location # Change to higher number like 5
			#####


			# cancel previous goal set by send_wp()
			self.spar_client.cancel_goal()
			# Create the goal object for landing
			goal = FlightMotionGoal()
			goal.motion = FlightMotionGoal.MOTION_LAND
			goal.velocity_vertical = self.vel_vert  # Set slow vertical landing velocity
			# Send the land signal/goals
			rospy.loginfo("Sending landing signal...")
			self.spar_client.send_goal(goal)
			self.spar_client.wait_for_result()

			# Output feedback on the landing result
			result = self.spar_client.get_state()
			if result == GoalStatus.SUCCEEDED:
				self.pub_land_vocal.publish(True)
				rospy.loginfo("Landing complete!")
				self.mission_completed = True
				self.spar_client.cancel_goal() # cance goal to finish mission
				rospy.sleep(rospy.Duration(2))
				self.shutdown() # shutdown nodes
			else:
				rospy.logerr("Landing failed!")
			# set landing initialisation flag 
			self.aruco_land_initialised = True

		# Handle shutdown by cancelling the current mission
		rospy.on_shutdown(lambda: self.spar_client.cancel_goal())

	def path_plan(self, waypoints):
		wps = [] # initialise wps list
		# Loop through the list of waypoints
		for i in range(len(waypoints)-1):
			# Set up a path request for breadcrumb
			# breadcrumb provides a sub-path generated waypoints list such that sub-waypoints are generated between the primary waypoints, 
			# 2 primary waypoints (req.start & req.end) are sent individually, iterating through the entire waypoint list, and sub-waypoints
			# are outputted as wps. 
			req = RequestPathRequest()

			# Set start and end point
			req.start.x = waypoints[i][0]
			req.start.y = waypoints[i][1]
			req.start.z = waypoints[i][2]
			req.end.x = waypoints[i+1][0]
			req.end.y = waypoints[i+1][1]
			req.end.z = waypoints[i+1][2]
			res = self.srvc_bc(req)
			# sparse_path can optimise sub-waypoints generated by breadcrumb in-between the main waypoints
			# print to screen whether sparse_path or path was used (to observe optimisations)
			if len(res.path_sparse.poses) > 0:  # Check if sparse path is available
				rospy.loginfo("Sparse path found between waypoints %d, %d, and %d", i, i + 1, i + 2)
				for pose in res.path_sparse.poses:
					wps.append([pose.position.x, pose.position.y, pose.position.z, 0])
			elif len(res.path.poses) > 0:  # Fallback to full path if sparse is not available
				rospy.loginfo("Full path found between waypoints %d, %d, and %d", i, i + 1, i + 2)
				for pose in res.path.poses:
					wps.append([pose.position.x, pose.position.y, pose.position.z, 0])
			else:
				rospy.logerr("No valid path found for waypoints %d, %d, and %d", i, i + 1, i + 2)
		# return appended wps variable (as new waypoint list)
		print(f"breadcrumb waypoints: {len(wps)}")
		print(f"generated waypoints: {len(waypoints)}")
		display_path(wps,"guidance/breadcrumb_list") # publishes total planned path to rviz
		return wps

	# This function will check if a list of waypoints is in the format we expect
	def check_waypoints(self, wps):
		# Make sure waypoints are a list
		if not isinstance(wps, list):
			rospy.logwarn("Waypoints are not list")
			return False

		# Make sure we have at least one waypoint
		if len(wps) < 1:
			rospy.logwarn("Waypoints list is empty")
			return False

		# Check each of our waypoints are a list ^
		for i in range(len(wps)):
			if not self.check_waypoint(wps[i]):
				rospy.logwarn("Waypoint %i did not pass check" % (i + 1))
				return False
		# If we haven't returned false yet, then waypoints look good!
		return True

	# This function will check if a waypoint is in the format we expect
	def check_waypoint(self, wp):
		# Make sure each waypoint is a list
		if not isinstance(wp, list):
			rospy.logwarn("Waypoint is not a list of coordinates")
			return False

		# Make sure each waypoint has 4 values
		if len(wp) != 4:
			rospy.logwarn("Waypoint has an invalid length (must be X/Y/Z/Yaw)")
			return False

		# If we haven't returned false yet, then waypoint looks valid!
		return True

	# This function will make sure we shut down the node as safely as possible
	def shutdown(self):
		# Unregister subscribers
		self.sub_pose.unregister()
		self.sub_roi.unregister()
		#self.check_waypoint_status.unregister()
		self.sub_battery.unregister()
		rospy.loginfo("Guidance stopped")

def generate_waypoints(width,height,alt):
	########### checked edited wps (7 passes, intermediate)
	waypoints = [[-1, -1, 2.25, 0], 
	[-3.6, -2.3, 2.25, 0.0], 
	[-3.6, 0.025, 2.25, 0.0], 
	[-3.6, 2.25, 2.25, 0.0], 
	[-2.358, 2.25, 2.25, 0.0], 
	[-2.358, 0.025, 2.25, 0.0], 
	[-2.358, -2.3, 2.25, 0.0], 
	[-1.11, -2.3, 2.25, 0.0], 
	[-1.11, 0.025, 2.25, 0.0], 
	[-1.116, 2.25, 2.25, 0.0], 
	[0.1251, 2.25, 2.25, 0.0], 
	[0.125, 0.025, 2.25, 0.0],
	[0.125, -2.3, 2.25, 0.0], 
	[1.36, -2.3, 2.25, 0.0], 
	[1.36, 0.025, 2.25, 0.0], 
	[1.36, 2.25, 2.25, 0.0], 
	[2.608, 2.25, 2.25, 0.0], 
	[2.608, 0.025, 2.25, 0.0], 
	[2.608, -2.3, 2.25, 0.0], 
	[3.85, -2.3, 2.25, 0.0], 
	[3.85, 0.025, 2.25, 0.0], 
	[3.85, 2.25, 2.25, 0.0]]

	#print(f"Waypoint List Generated: {waypoints}")
	#print(f"x positions: {x_points}")
	#print(f"y positions: {y_points}")
	print(f"altitude: {alt}")

	# Check all generated waypoints are within bounds (height, width & alt)
	within_bounds = True
	for wp in waypoints:
		x, y, z, _ = wp 

		if not (-height/2 <= y <= height/2 and -width/2 <= x <= width/2 and z <= alt):
			within_bounds = False
			print(f"Waypoint {wp} is out of bounds!, all waypoints nulled")
			waypoints = 0
			break

	if within_bounds:
		print("All waypoints are within bounds.")
		display_path(waypoints,"guidance/waypoint_list")

	return waypoints

# Function to display the target marker (sphere)
def display_target_marker(target_position,target_name_str):
    rospy.loginfo(f"Displaying target marker on /visualization_marker")
    
    # Ensure the publisher is initialized with the /visualization_marker topic
    pub_marker = rospy.Publisher('/visualization_marker', Marker, queue_size=10, latch=True)
    
    # Create the Marker message for the sphere
    marker = Marker()
    marker.header.frame_id = "map"  # Adjust frame according to your setup
    marker.header.stamp = rospy.Time.now()
    marker.ns = target_name_str   # Namespace for the marker
    marker.id = 0  # Unique ID for the sphere marker
    marker.type = Marker.SPHERE
    marker.action = Marker.ADD
    
    # Set the position of the target
    marker.pose.position.x = target_position[0]
    marker.pose.position.y = target_position[1]
    marker.pose.position.z = target_position[2]
    
    # Set the orientation (default orientation)
    marker.pose.orientation.x = 0.0
    marker.pose.orientation.y = 0.0
    marker.pose.orientation.z = 0.0
    marker.pose.orientation.w = 1.0
    
    # Set the scale of the marker (size of the sphere)
    marker.scale.x = 0.2  # Scale on x-axis
    marker.scale.y = 0.2  # Scale on y-axis
    marker.scale.z = 0.2  # Scale on z-axis
    
    # Set the color of the marker (RGBA)
    marker.color.r = 1.0  # Red
    marker.color.g = 0.0  # Green
    marker.color.b = 0.0  # Blue
    marker.color.a = 1.0  # Alpha (1.0 means fully opaque)
    
    # Set lifetime to 0, so the marker remains in RViz
    marker.lifetime = rospy.Duration(0)

    # Publish the sphere marker to the /visualization_marker topic
    pub_marker.publish(marker)

# Function to display the target name (text marker)
def display_target_name(target_position, target_name):
    rospy.loginfo(f"Displaying target name for {target_name}")
    
    # Ensure the publisher is initialized with a specific topic (e.g., /visualization_marker)
    pub_marker = rospy.Publisher('/visualization_marker', Marker, queue_size=10, latch=True)
    
    # Create the Marker message for the text (name)
    text_marker = Marker()
    text_marker.header.frame_id = "map"
    text_marker.header.stamp = rospy.Time.now()
    text_marker.ns = target_name  # Namespace for the text marker (can be customized)
    text_marker.type = Marker.TEXT_VIEW_FACING
    text_marker.action = Marker.ADD
    
    # Position the text above the target marker
    text_marker.pose.position.x = target_position[0]
    text_marker.pose.position.y = target_position[1]
    text_marker.pose.position.z = target_position[2] + 0.5  # Slightly above the sphere
    
    # Set orientation for text (default orientation)
    text_marker.pose.orientation.x = 0.0
    text_marker.pose.orientation.y = 0.0
    text_marker.pose.orientation.z = 0.0
    text_marker.pose.orientation.w = 1.0

    # Set scale and color for the text
    text_marker.scale.z = 0.2  # Scale of the text (height of the text)
    text_marker.color.r = 0.0  # Text color (e.g., white)
    text_marker.color.g = 1.0
    text_marker.color.b = 0.0
    text_marker.color.a = 1.0  # Fully opaque text

    # Set the text based on the target name
    if target_name == "Person":
        text_marker.text = "Target Person"
        text_marker.id = 1  # Unique ID for the text marker
    elif target_name == "Backpack":
        text_marker.text = "Target Backpack"
        text_marker.id = 2  # Unique ID for the text marker
    elif target_name == "Drone":
        text_marker.text = "Target Drone"
        text_marker.id = 3  # Unique ID for the text marker
    elif target_name == "Phone":
        text_marker.text = "Target Phone"
        text_marker.id = 4  # Unique ID for the text marker
    elif target_name == "Aruco":
        text_marker.text = "Landing Aruco Location"
        text_marker.id = 5  # Unique ID for the text marker
    else:
        text_marker.text = target_name  # Default to the topic name if no match
        text_marker.id = 6  # Assign a default unique ID

    # Set lifetime to 0 so the text remains visible in RViz
    text_marker.lifetime = rospy.Duration(0)

    # Publish the text marker
    pub_marker.publish(text_marker)

def main(args):
	# Initialise ROS
	rospy.init_node('guidance')

	# Generate waypoint list using generate_waypoints(...); returns wps_generated
	waypoints = generate_waypoints(width=8,height=5,alt=flight_height)
	wps = [[ 0.0, 0.0, 1.0, 0.0],
		[ 1.0, 1.0, 1.0, 0.0],
		[-1.0, 1.0, 1.0, 0.0],
		[-1.0,-1.0, 1.0, 0.0],
		[ 1.0,-1.0, 1.0, 0.0],
		[ 0.0, 0.0, 1.0, 0.0]]
	# send wps_pathplanned into Guidance "Guidance(wps_path_planned)"
	guide = Guidance(waypoints)

	# Spin!
	rospy.spin()


if __name__ == '__main__':
	try:
		main(sys.argv)
	except rospy.ROSInterruptException:
		pass

	print('')
