#!/usr/bin/env python

import math
import rospy
import tf2_ros
from std_msgs.msg import Time
from geometry_msgs.msg import TransformStamped
from visualization_msgs.msg import Marker

# Global Variables
tfbr = None
pub_found = None
pub_marker = None

camera_name = "camera"
target_name = "target"

def send_tf_target():
    # Generate our "found" timestamp
    time_found = rospy.Time.now()

    # Create a transform arbitrarily in the camera frame
    t = TransformStamped()
    t.header.stamp = time_found
    t.header.frame_id = camera_name
    t.child_frame_id = target_name

    t.transform.translation.x = -0.4
    t.transform.translation.y = 0.2
    t.transform.translation.z = 1.5 - 0.15
    t.transform.rotation.x = 0.0
    t.transform.rotation.y = 0.0
    t.transform.rotation.z = 0.0
    t.transform.rotation.w = 1.0

    # Send the transformation to TF and "found" timestamp to localiser
    tfbr.sendTransform(t)
    pub_found.publish(time_found)

    # Now create and publish a marker for RViz visualization
    marker = Marker()
    marker.header.frame_id = camera_name  # Same frame as the camera
    marker.header.stamp = time_found
    marker.ns = "target_marker"
    marker.id = 0
    marker.type = Marker.SPHERE
    marker.action = Marker.ADD

    # Set the position of the marker to the same as the target
    marker.pose.position.x = t.transform.translation.x
    marker.pose.position.y = t.transform.translation.y
    marker.pose.position.z = t.transform.translation.z

    # Marker orientation
    marker.pose.orientation.x = t.transform.rotation.x
    marker.pose.orientation.y = t.transform.rotation.y
    marker.pose.orientation.z = t.transform.rotation.z
    marker.pose.orientation.w = t.transform.rotation.w

    # Set marker scale (size of the sphere)
    marker.scale.x = 0.2  # Scale on x-axis
    marker.scale.y = 0.2  # Scale on y-axis
    marker.scale.z = 0.2  # Scale on z-axis

    # Set marker color (RGBA)
    marker.color.r = 1.0  # Red
    marker.color.g = 0.0  # Green
    marker.color.b = 0.0  # Blue
    marker.color.a = 1.0  # Fully opaque

    # Set the marker lifetime (0 means it remains until deleted)
    marker.lifetime = rospy.Duration(0)

    # Publish the marker
    pub_marker.publish(marker)

if __name__ == '__main__':
    rospy.init_node('tf2_broadcaster_target')
    rospy.loginfo("tf2_broadcaster_target sending target found...")

    # Setup tf2 broadcaster and timestamp publisher
    tfbr = tf2_ros.TransformBroadcaster()
    pub_found = rospy.Publisher('/emulated_uav/target_found', Time, queue_size=10)

    # Add marker publisher
    pub_marker = rospy.Publisher('/visualization_marker', Marker, queue_size=10)

    # Give the nodes a few seconds to configure
    rospy.sleep(rospy.Duration(2))

    # Send out our target messages and marker
    send_tf_target()

    # Give the nodes a few seconds to transmit data, then we can exit
    rospy.sleep(rospy.Duration(2))
    rospy.loginfo("tf2_broadcaster_target sent TF, timestamp, and marker")
